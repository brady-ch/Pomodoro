{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brady\\\\Thinkful\\\\Pomodoro\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\display\\\\Display.js\";\nimport React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration/index\";\n\nfunction Display(props) {\n  const {\n    times\n  } = props;\n\n  function toPercent(part, whole) {\n    return 100 - Math.floor(part / whole * 100);\n  }\n\n  if (times.isFocusMode) {\n    let currentTime = times.focus.current;\n    let defaultTime = times.focus.current;\n  } else {\n    let currentTime = times.breakTime.current;\n    let defaultTime = times.breakTime.current;\n  }\n\n  let percent = toPercent(currentTime, defaultTime);\n\n  if (times.hasStarted) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, times.isFocusMode ? `Focusing for ${secondsToDuration(times.focus.default)} minutes` : `On Break for ${secondsToDuration(times.breakTime.default)} minutes`), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, times.isFocusMode ? `${secondsToDuration(times.focus.current)} remaining` : `${secondsToDuration(times.breakTime.current)} remaining`))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: \"0%\"\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n  return null;\n}\n\nexport default Display;","map":{"version":3,"sources":["C:/Users/brady/Thinkful/Pomodoro/Project_Pomodoro_Timer_Qualified_1/src/display/Display.js"],"names":["React","minutesToDuration","secondsToDuration","Display","props","times","toPercent","part","whole","Math","floor","isFocusMode","currentTime","focus","current","defaultTime","breakTime","percent","hasStarted","default","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,yBAArD;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;;AAEA,WAASE,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AAC9B,WAAO,MAAMC,IAAI,CAACC,KAAL,CAAYH,IAAI,GAAGC,KAAR,GAAiB,GAA5B,CAAb;AACD;;AAED,MAAIH,KAAK,CAACM,WAAV,EAAuB;AACrB,QAAIC,WAAW,GAAGP,KAAK,CAACQ,KAAN,CAAYC,OAA9B;AACA,QAAIC,WAAW,GAAGV,KAAK,CAACQ,KAAN,CAAYC,OAA9B;AACD,GAHD,MAGO;AACL,QAAIF,WAAW,GAAGP,KAAK,CAACW,SAAN,CAAgBF,OAAlC;AACA,QAAIC,WAAW,GAAGV,KAAK,CAACW,SAAN,CAAgBF,OAAlC;AACD;;AACD,MAAIG,OAAO,GAAGX,SAAS,CAACM,WAAD,EAAcG,WAAd,CAAvB;;AAEA,MAAIV,KAAK,CAACa,UAAV,EAAsB;AACpB,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGb,KAAK,CAACM,WAAN,GACI,gBAAeT,iBAAiB,CAC/BG,KAAK,CAACQ,KAAN,CAAYM,OADmB,CAE/B,UAHL,GAII,gBAAejB,iBAAiB,CAC/BG,KAAK,CAACW,SAAN,CAAgBG,OADe,CAE/B,UAPR,CAFF,eAYE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGd,KAAK,CAACM,WAAN,GACI,GAAET,iBAAiB,CAACG,KAAK,CAACQ,KAAN,CAAYC,OAAb,CAAsB,YAD7C,GAEI,GAAEZ,iBAAiB,CAACG,KAAK,CAACW,SAAN,CAAgBF,OAAjB,CAA0B,YAHpD,CAZF,CADF,CAFF,eAsBE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEM,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB;AAKE,uBAAc,GALhB,CAKoB;AALpB;AAME,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OANT,CAM0B;AAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAtBF,CADF;AAuCD;;AACD,SAAO,IAAP;AACD;;AAED,eAAelB,OAAf","sourcesContent":["import React from \"react\";\r\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration/index\";\r\n\r\nfunction Display(props) {\r\n  const { times } = props;\r\n\r\n  function toPercent(part, whole) {\r\n    return 100 - Math.floor((part / whole) * 100);\r\n  }\r\n\r\n  if (times.isFocusMode) {\r\n    let currentTime = times.focus.current;\r\n    let defaultTime = times.focus.current;\r\n  } else {\r\n    let currentTime = times.breakTime.current;\r\n    let defaultTime = times.breakTime.current;\r\n  }\r\n  let percent = toPercent(currentTime, defaultTime);\r\n\r\n  if (times.hasStarted) {\r\n    return (\r\n      <div>\r\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              {times.isFocusMode\r\n                ? `Focusing for ${secondsToDuration(\r\n                    times.focus.default\r\n                  )} minutes`\r\n                : `On Break for ${secondsToDuration(\r\n                    times.breakTime.default\r\n                  )} minutes`}\r\n            </h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {times.isFocusMode\r\n                ? `${secondsToDuration(times.focus.current)} remaining`\r\n                : `${secondsToDuration(times.breakTime.current)} remaining`}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default Display;\r\n"]},"metadata":{},"sourceType":"module"}